# ═══════════════════════════════════════════════════════════════
# AI-Powered Migration Validation System - PR-Specific Checks
# ═══════════════════════════════════════════════════════════════

name: 🔍 PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]
  pull_request_review:
    types: [submitted]

env:
  FORCE_COLOR: 1
  PYTHONUNBUFFERED: 1

# Cancel previous runs for same PR
concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ───────────────────────────────────────────────────────────────
  # 📊 PR Metadata & Validation
  # ───────────────────────────────────────────────────────────────
  pr-validation:
    name: 📊 PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      has-python-changes: ${{ steps.changes.outputs.python }}
      has-config-changes: ${{ steps.changes.outputs.config }}
      has-test-changes: ${{ steps.changes.outputs.tests }}
      pr-size: ${{ steps.pr-size.outputs.size }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect File Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - 'src/**/*.py'
              - 'tests/**/*.py'
            config:
              - 'requirements*.txt'
              - 'setup.py'
              - 'pytest.ini'
              - '.github/**'
            tests:
              - 'tests/**'
              - 'run_tests.py'

      - name: 📏 Calculate PR Size
        id: pr-size
        run: |
          files_changed=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)
          lines_added=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $1} END {print sum}')
          lines_removed=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $2} END {print sum}')
          
          echo "files_changed=$files_changed" >> $GITHUB_OUTPUT
          echo "lines_added=$lines_added" >> $GITHUB_OUTPUT
          echo "lines_removed=$lines_removed" >> $GITHUB_OUTPUT
          
          # Determine size category
          total_changes=$((lines_added + lines_removed))
          if [ $total_changes -lt 50 ]; then
            size="XS"
          elif [ $total_changes -lt 200 ]; then
            size="S"
          elif [ $total_changes -lt 500 ]; then
            size="M"
          elif [ $total_changes -lt 1000 ]; then
            size="L"
          else
            size="XL"
          fi
          
          echo "size=$size" >> $GITHUB_OUTPUT
          
          # Add to PR summary
          echo "## 📊 PR Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: $size ($total_changes total changes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $files_changed modified" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines**: +$lines_added / -$lines_removed" >> $GITHUB_STEP_SUMMARY

      - name: 🏷️ Add PR Size Label
        uses: actions/github-script@v7
        with:
          script: |
            const size = '${{ steps.pr-size.outputs.size }}';
            const labels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];
            
            // Remove existing size labels
            for (const label of labels) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (error) {
                // Label doesn't exist, ignore
              }
            }
            
            // Add current size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${size}`]
            });

  # ───────────────────────────────────────────────────────────────
  # 🧪 Fast Quality Checks (for rapid feedback)
  # ───────────────────────────────────────────────────────────────
  fast-checks:
    name: 🧪 Fast Quality Checks
    runs-on: ubuntu-latest
    needs: pr-validation
    if: needs.pr-validation.outputs.has-python-changes == 'true'
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install Quality Tools
        run: |
          python -m pip install --upgrade pip
          pip install isort flake8


      - name: 📏 Check Import Sorting
        run: |
          echo "## 📏 Import Sorting Check" >> $GITHUB_STEP_SUMMARY
          isort --check-only --diff src/ tests/ || {
            echo "❌ Import sorting issues found" >> $GITHUB_STEP_SUMMARY
            echo "Run: \`isort src/ tests/\` to fix" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Import sorting is correct" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Quick Lint Check
        run: |
          echo "## 🔍 Linting Check" >> $GITHUB_STEP_SUMMARY
          flake8_output=$(flake8 src/ tests/ --count --statistics) || {
            echo "❌ Linting issues found" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$flake8_output" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ No linting issues found" >> $GITHUB_STEP_SUMMARY

  # ───────────────────────────────────────────────────────────────
  # 🎯 Focused Testing (only changed areas)
  # ───────────────────────────────────────────────────────────────
  focused-tests:
    name: 🎯 Focused Tests
    runs-on: ubuntu-latest
    needs: [pr-validation, fast-checks]
    if: needs.pr-validation.outputs.has-python-changes == 'true' || needs.pr-validation.outputs.has-test-changes == 'true'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🎯 Run Tests for Changed Files
        run: |
          # Get changed Python files
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD -- '*.py' | grep -E '^(src|tests)/' | head -20)
          
          echo "## 🎯 Testing Changed Files" >> $GITHUB_STEP_SUMMARY
          
          if [ -z "$changed_files" ]; then
            echo "No Python files changed, running fast unit tests" >> $GITHUB_STEP_SUMMARY
            python run_tests.py --unit --fast --parallel 2
          else
            echo "Changed files:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$changed_files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Run focused tests
            python run_tests.py --unit --parallel 2
          fi

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-test-results-${{ github.event.pull_request.number }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 3

  # ───────────────────────────────────────────────────────────────
  # 🛡️ Security Check for PR
  # ───────────────────────────────────────────────────────────────
  pr-security:
    name: 🛡️ PR Security Check
    runs-on: ubuntu-latest
    needs: pr-validation
    if: needs.pr-validation.outputs.has-python-changes == 'true' || needs.pr-validation.outputs.has-config-changes == 'true'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔒 Security Scan (Changed Files)
        run: |
          # Get changed Python files in src/
          changed_py_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD -- 'src/**/*.py' | head -10)
          
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$changed_py_files" ]; then
            echo "Scanning changed files:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$changed_py_files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Run bandit on changed files
            bandit $changed_py_files --severity-level medium --confidence-level medium || {
              echo "❌ Security issues found in changed files" >> $GITHUB_STEP_SUMMARY
              exit 1
            }
            echo "✅ No security issues found in changed files" >> $GITHUB_STEP_SUMMARY
          else
            echo "No Python source files changed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Dependency Security Check
        if: needs.pr-validation.outputs.has-config-changes == 'true'
        run: |
          echo "## 🔍 Dependency Security Check" >> $GITHUB_STEP_SUMMARY
          safety check --short-report || {
            echo "❌ Vulnerable dependencies found" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ No vulnerable dependencies found" >> $GITHUB_STEP_SUMMARY

  # ───────────────────────────────────────────────────────────────
  # 📝 PR Comment with Results
  # ───────────────────────────────────────────────────────────────
  pr-comment:
    name: 📝 PR Summary Comment
    runs-on: ubuntu-latest
    needs: [pr-validation, fast-checks, focused-tests, pr-security]
    if: always() && github.event.action != 'ready_for_review'
    
    steps:
      - name: 📝 Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing bot comment
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔍 PR Quality Check Results')
            );
            
            const prSize = '${{ needs.pr-validation.outputs.pr-size }}';
            const fastChecks = '${{ needs.fast-checks.result }}';
            const focusedTests = '${{ needs.focused-tests.result }}';
            const prSecurity = '${{ needs.pr-security.result }}';
            
            const statusIcon = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };
            
            const body = `## 🔍 PR Quality Check Results
            
            **PR Size:** \`${prSize}\` | **Status:** ${
              fastChecks === 'success' && 
              (focusedTests === 'success' || focusedTests === 'skipped') && 
              (prSecurity === 'success' || prSecurity === 'skipped') 
                ? '✅ Ready for Review' 
                : '⏳ Checks in Progress'
            }
            
            | Check | Status | Details |
            |-------|--------|---------|
            | 🎨 Code Quality | ${statusIcon(fastChecks)} | Formatting, imports, linting |
            | 🧪 Focused Tests | ${statusIcon(focusedTests)} | Tests for changed code |
            | 🛡️ Security Scan | ${statusIcon(prSecurity)} | Security analysis |
            
            ${fastChecks === 'failure' ? '⚠️ **Please fix code quality issues before review**' : ''}
            ${focusedTests === 'failure' ? '⚠️ **Tests are failing - please fix before review**' : ''}
            ${prSecurity === 'failure' ? '🚨 **Security issues detected - please address immediately**' : ''}
            
            ---
            _Automated checks by AI-Powered Migration Validation System CI/CD_`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # ───────────────────────────────────────────────────────────────
  # ✅ PR Status Check
  # ───────────────────────────────────────────────────────────────
  pr-status:
    name: ✅ PR Status
    runs-on: ubuntu-latest
    needs: [pr-validation, fast-checks, focused-tests, pr-security]
    if: always()
    
    steps:
      - name: 📊 Evaluate PR Status
        run: |
          echo "PR Validation: ${{ needs.pr-validation.result }}"
          echo "Fast Checks: ${{ needs.fast-checks.result }}"
          echo "Focused Tests: ${{ needs.focused-tests.result }}"
          echo "PR Security: ${{ needs.pr-security.result }}"
          
          # Check if any required check failed
          if [[ "${{ needs.fast-checks.result }}" == "failure" ]]; then
            echo "❌ Fast checks failed - PR not ready for review"
            exit 1
          fi
          
          if [[ "${{ needs.focused-tests.result }}" == "failure" ]]; then
            echo "❌ Tests failed - PR not ready for review"
            exit 1
          fi
          
          if [[ "${{ needs.pr-security.result }}" == "failure" ]]; then
            echo "❌ Security checks failed - PR not ready for review"
            exit 1
          fi
          
          echo "✅ All PR checks passed - ready for review!"