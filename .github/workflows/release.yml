# ═══════════════════════════════════════════════════════════════
# AI-Powered Migration Validation System - Release Pipeline
# ═══════════════════════════════════════════════════════════════

name: 🚀 Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Pre-release tags
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'

env:
  FORCE_COLOR: 1
  PYTHONUNBUFFERED: 1

# Ensure only one release runs at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ───────────────────────────────────────────────────────────────
  # 🔍 Pre-Release Validation
  # ───────────────────────────────────────────────────────────────
  pre-release-validation:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract Version Info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
            if [[ $VERSION == *"-"* ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          else
            VERSION=${{ github.event.release.tag_name }}
            IS_PRERELEASE=${{ github.event.release.prerelease }}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "## 🚀 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release:** $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,quality,security-scan]"

      - name: 🧪 Run Full Test Suite
        run: |
          echo "## 🧪 Running Comprehensive Tests" >> $GITHUB_STEP_SUMMARY
          python run_tests.py --unit --integration --coverage --parallel 4
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY

      - name: 🛡️ Security Validation
        run: |
          echo "## 🛡️ Security Validation" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ --severity-level medium
          safety check
          echo "✅ Security checks passed" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Generate Coverage Report
        run: |
          coverage xml
          coverage html
          coverage report --show-missing

      - name: 📤 Upload Pre-Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pre-release-validation-${{ steps.version.outputs.version }}
          path: |
            htmlcov/
            coverage.xml
            dist/
          retention-days: 30

  # ───────────────────────────────────────────────────────────────
  # 📦 Build & Package
  # ───────────────────────────────────────────────────────────────
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: pre-release-validation
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: 🔧 Update Version in setup.py
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          sed -i "s/version=\".*\"/version=\"${VERSION#v}\"/" setup.py
          echo "Updated version to: ${VERSION#v}"

      - name: 🏗️ Build Package
        run: |
          python -m build
          echo "## 📦 Package Build Results" >> $GITHUB_STEP_SUMMARY
          echo "Built packages:" >> $GITHUB_STEP_SUMMARY
          ls -la dist/ >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Validate Package
        run: |
          twine check dist/*
          echo "✅ Package validation passed" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ needs.pre-release-validation.outputs.version }}
          path: dist/
          retention-days: 90

  # ───────────────────────────────────────────────────────────────
  # 🐳 Docker Build (Optional)
  # ───────────────────────────────────────────────────────────────
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build]
    if: github.event.inputs.environment == 'production' || contains(github.ref, 'refs/tags/')
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download Package
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.pre-release-validation.outputs.version }}
          path: dist/

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.pre-release-validation.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ───────────────────────────────────────────────────────────────
  # 📋 Generate Release Notes
  # ───────────────────────────────────────────────────────────────
  release-notes:
    name: 📋 Generate Release Notes
    runs-on: ubuntu-latest
    needs: pre-release-validation
    timeout-minutes: 10
    
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Generate Release Notes
        id: notes
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n1)
          
          echo "## 🚀 What's New in $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📈 Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            
            # Generate changelog
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$VERSION >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 🧪 Testing" >> release_notes.md
          echo "- ✅ All unit and integration tests passing" >> release_notes.md
          echo "- ✅ Security scans completed" >> release_notes.md
          echo "- ✅ Code coverage maintained" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 📦 Installation" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install ai-migration-validator==${VERSION#v}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔗 Assets" >> release_notes.md
          echo "- 📦 Python Package (PyPI)" >> release_notes.md
          echo "- 🐳 Docker Image (GitHub Container Registry)" >> release_notes.md
          echo "- 📊 Coverage Reports" >> release_notes.md
          
          # Set output for next step
          {
            echo 'release-notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: 📤 Upload Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ needs.pre-release-validation.outputs.version }}
          path: release_notes.md
          retention-days: 30

  # ───────────────────────────────────────────────────────────────
  # 🏷️ Create GitHub Release
  # ───────────────────────────────────────────────────────────────
  github-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build, release-notes]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.pre-release-validation.outputs.version }}
          path: dist/

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version }}
          name: "Release ${{ needs.pre-release-validation.outputs.version }}"
          body: ${{ needs.release-notes.outputs.release-notes }}
          prerelease: ${{ needs.pre-release-validation.outputs.is-prerelease == 'true' }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ───────────────────────────────────────────────────────────────
  # 🚀 Deploy to PyPI (Optional)
  # ───────────────────────────────────────────────────────────────
  pypi-publish:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build, github-release]
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    timeout-minutes: 10
    
    steps:
      - name: 📥 Download Package
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.pre-release-validation.outputs.version }}
          path: dist/

      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ needs.pre-release-validation.outputs.is-prerelease == 'true' && 'https://test.pypi.org/legacy/' || 'https://upload.pypi.org/legacy/' }}

  # ───────────────────────────────────────────────────────────────
  # 📊 Post-Release Validation
  # ───────────────────────────────────────────────────────────────
  post-release-validation:
    name: 📊 Post-Release Validation
    runs-on: ubuntu-latest
    needs: [pre-release-validation, github-release]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📊 Release Summary
        run: |
          echo "# 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.pre-release-validation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release:** ${{ needs.pre-release-validation.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ Completed Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-release validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Package build" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release notes generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub release creation" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "- ✅ PyPI publication" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Docker image build" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 Release ${{ needs.pre-release-validation.outputs.version }} completed successfully!"
          echo "📦 Package is available for installation"
          echo "🔗 GitHub release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.pre-release-validation.outputs.version }}"

      - name: 🚨 Failure Notification
        if: failure()
        run: |
          echo "🚨 Release ${{ needs.pre-release-validation.outputs.version }} failed!"
          echo "Please check the workflow logs and retry if necessary."
          exit 1