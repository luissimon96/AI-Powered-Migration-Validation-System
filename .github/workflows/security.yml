# ═══════════════════════════════════════════════════════════════
# AI-Powered Migration Validation System - Security Scanning
# ═══════════════════════════════════════════════════════════════

name: 🛡️ Security Analysis

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'setup.py'
      - 'src/**/*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'setup.py'
      - 'src/**/*.py'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'basic'
          - 'standard'
          - 'comprehensive'

env:
  FORCE_COLOR: 1
  SECURITY_SCAN: true

# Ensure only one security scan runs at a time
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ───────────────────────────────────────────────────────────────
  # 🔍 Static Code Security Analysis
  # ───────────────────────────────────────────────────────────────
  static-analysis:
    name: 🔍 Static Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[security-scan]"
          pip install semgrep

      - name: 🔒 Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt -o bandit-report.txt || true
    
          echo "## 🔒 Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          cat bandit-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 🛡️ Semgrep Security Scan
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/ --text --output=semgrep-report.txt || true
          echo "## 🛡️ Semgrep Security Scan Results" >> $GITHUB_STEP_SUMMARY
          cat semgrep-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload Security Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-security-analysis-${{ github.run_id }}
          path: |
            bandit-report.*
            semgrep-report.*
          retention-days: 30

  # ───────────────────────────────────────────────────────────────
  # 📦 Dependency Vulnerability Scanning
  # ───────────────────────────────────────────────────────────────
  dependency-scan:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[security-scan]"
          pip install pip-audit cyclonedx-bom

      - name: 🛡️ Safety Vulnerability Check
        run: |
          safety check --json > safety-report.json || true
          safety check --output text > safety-report.txt || true
          echo "## 🛡️ Safety Vulnerability Check" >> $GITHUB_STEP_SUMMARY
          cat safety-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Pip-Audit Vulnerability Scan
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx-json --output=sbom.json || true
          pip-audit --format=text --output=pip-audit-report.txt || true
          echo "## 🔍 Pip-Audit Results" >> $GITHUB_STEP_SUMMARY
          cat pip-audit-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 📋 Generate Software Bill of Materials (SBOM)
        run: |
          cyclonedx-py -o sbom-cyclonedx.json || true
          echo "## 📋 SBOM Generated" >> $GITHUB_STEP_SUMMARY
          echo "Software Bill of Materials created: sbom-cyclonedx.json" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload Dependency Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-analysis-${{ github.run_id }}
          path: |
            safety-report.*
            pip-audit-report.*
            sbom*.json
          retention-days: 30

  # ───────────────────────────────────────────────────────────────
  # 🔐 Secrets & Sensitive Data Scanning
  # ───────────────────────────────────────────────────────────────
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

      - name: 🔐 GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_VERBOSE: true

  # ───────────────────────────────────────────────────────────────
  # 📊 Security Compliance & Configuration
  # ───────────────────────────────────────────────────────────────
  compliance:
    name: 📊 Security Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install Compliance Tools
        run: |
          python -m pip install --upgrade pip
          pip install checkov dlint

      - name: 🏗️ Infrastructure Security Scan (Checkov)
        run: |
          checkov -d . --framework github_actions --output json --output-file checkov-report.json || true
          checkov -d . --framework github_actions --output cli --output-file checkov-report.txt || true
          echo "## 🏗️ Infrastructure Security Scan" >> $GITHUB_STEP_SUMMARY
          cat checkov-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 🐍 Python Security Linting (dlint)
        run: |
          dlint src/ --print-dlint-errors > dlint-report.txt || true
          echo "## 🐍 Python Security Linting" >> $GITHUB_STEP_SUMMARY
          cat dlint-report.txt >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload Compliance Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-reports-${{ github.run_id }}
          path: |
            checkov-report.*
            dlint-report.txt
          retention-days: 30

  # ───────────────────────────────────────────────────────────────
  # 🔬 AI/ML Security Analysis
  # ───────────────────────────────────────────────────────────────
  ai-security:
    name: 🔬 AI/ML Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: 📦 Install AI Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[ai]"
          pip install aider-chat # AI security analysis
          
      - name: 🤖 AI Model Security Check
        run: |
          echo "## 🤖 AI/ML Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Checking for potential AI/ML security issues..." >> $GITHUB_STEP_SUMMARY
          
          # Check for hardcoded API keys in AI configurations
          grep -r -i "api[_-]*key\|secret\|token" src/ --include="*.py" || echo "No obvious hardcoded secrets found"
          
          # Check for unsafe AI model loading patterns
          grep -r "pickle\|joblib\|torch\.load" src/ --include="*.py" || echo "No unsafe model loading patterns found"
          
          # Check for data validation in AI inputs
          grep -r "validate\|sanitiz" src/ --include="*.py" || echo "Check: Ensure proper input validation for AI models"

      - name: 📊 AI Security Summary
        run: |
          echo "## 🔬 AI/ML Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Use environment variables for API keys" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validate all AI model inputs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Use trusted model sources only" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Implement rate limiting for AI APIs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Log AI interactions for monitoring" >> $GITHUB_STEP_SUMMARY

  # ───────────────────────────────────────────────────────────────
  # 📋 Security Summary Report
  # ───────────────────────────────────────────────────────────────
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, dependency-scan, secrets-scan]
    if: always()
    
    steps:
      - name: 📊 Security Status Summary
        run: |
          echo "# 🛡️ Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.static-analysis.result }}" == "failure" || "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "❌ **Security issues detected!** Please review the failed checks." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Security Alert (on failure)
        if: failure()
        run: |
          echo "🚨 SECURITY ALERT: Critical security issues found!"
          echo "Please review the security scan results and address any vulnerabilities."
          echo "Check the job artifacts for detailed reports."